<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Mono.TextTemplating" #>
<#@ assembly name="EtAlii.xMvvm" #>
<#@ import namespace="System" #>
<#@ import namespace="Mono.TextTemplating" #>
<#@ import namespace="EtAlii.xMvvm" #>
<#@ include file="ElementConstruction.t4" #>
<#
    var data = ((ITextTemplatingSessionHost)Host).Session;
    var view = (View)data["view"];
#>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the xMvvm Unity 3D toolchain.
//     Runtime Version: <#= data["toolVersion"] #>
//     Created: <#= data["now"] #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

namespace <#= data["classNamespace"] #>
{
    using UnityEngine;
    using System;
    using <#= data["variantNamespace"] #>;

    public partial class <#= data["className"] #> : <#= data["variantNamespace"] #>.View<<#= view.ViewModelType #>>  
    {
        // Resources.
<# foreach(var resource in view.Resources.Items) { #>
        private readonly <#=resource.Type#> <#= resource.Key.AsPrivateMember() #>;
<# } #>
        
        // Bindings.
<# foreach(var binding in view.Bindings) { #>
        private readonly Binding<<#=binding.Type#>, <#=view.ViewModelType#>> <#= binding.Id.AsPrivateMember() #>;
<# } #>

        // Elements.
<# foreach(var element in view.Elements) { #>
        private readonly <#=data["variantNamespace"]#>.Element <#= element.Name.AsPrivateMember() #>;
<# } #>

        public <#=data["className"]#>() : this(GameObject.Instantiate(Resources.Load("<#=view.Prefab#>", typeof(GameObject))) as GameObject)
        {
        }
        
        public <#=data["className"]#>(GameObject gameObject) : base(gameObject)
        {
            // Setup the resources.
<# foreach(var resource in view.Resources.Items) { #>
            <#= resource.Key.AsPrivateMember()#> = new <#=resource.Type#>();
<# } #>

            // Wire the bindings.
<# foreach(var binding in view.Bindings) {
    if (binding is Property property) { #>
            <#= property.Id.AsPrivateMember()#> = new PropertyBinding<<#=property.Type#>, <#=view.ViewModelType#>>(this, "<#=property.Path#>", component => component.<#=property.Member#>, vm => vm.<#=property.Value.Name#>, BindingMode.<#=property.Value.Mode#>);
<# } else if(binding is Event evt) { #>
            <#= evt.Id.AsPrivateMember()#> = new EventBinding<<#=evt.Type#>, <#=view.ViewModelType#>>(this, "<#=evt.Path#>", component => component.<#=evt.Member#>, vm => vm.<#=evt.Handler.Name#>);
<# } } #>

            // Setup the child elements.
<# foreach(var element in view.Elements) { #>
            <#= element.Name.AsPrivateMember()#> = <# ConstructElement(element, data, true); #>;
<#
   } #>

            // And initialize.
            Initialize();   
        }

    }
}
