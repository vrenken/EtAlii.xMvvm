<#@ template debug="false" hostspecific="true" language="C#v3.5" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Mono.TextTemplating" #>
<#@ assembly name="EtAlii.xMvvm" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Mono.TextTemplating" #>
<#@ import namespace="EtAlii.xMvvm" #>
<#@ include file="ElementConstruction.t4" #>
<#
    var data = ((ITextTemplatingSessionHost)Host).Session;
    var view = (View)data["view"];
    CodeEntity.ResetVariableNumbering();
#>//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the xMvvm Unity 3D toolchain.
//     Runtime Version: <#= data["toolVersion"] #>
//     Created: <#= data["now"] #>
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// ReSharper disable All

namespace <#= data["classNamespace"] #>
{
    using UnityEngine;
    using System;
    using <#= data["variantNamespace"] #>;

    public partial class <#= data["className"] #> : <#= data["variantNamespace"] #>.View<<#= view.ViewModelType #>>  
    {
        // Resources.
<# foreach(var resource in view.Resources.Items) { if(CodeEntity.RequiresField(resource)) { #>
        private readonly <#=resource.Type#> <#=CodeEntity.GetLocalName(resource) #>;
<# } } #>
        
        // Component bindings.
<# foreach(var binding in view.Bindings) { if (CodeEntity.RequiresField(binding)) { #>
        private readonly ComponentBinding<<#=binding.Type#>, <#=view.ViewModelType#>> <#=CodeEntity.GetLocalName(binding) #>;
<# } } #>

        // Element bindings.
<#  
    var alElements = (Element[])data["allElements"];
    foreach(var element in alElements) { if (CodeEntity.RequiresField(element)) { #>
        private readonly <#=data["variantNamespace"]#>.ElementBinding<<#=view.ViewModelType#>> <#=CodeEntity.GetLocalName(element) #>;
<# } } #>

        public <#=data["className"]#>() : this(GameObject.Instantiate(Resources.Load("<#=view.Prefab#>", typeof(GameObject))) as GameObject)
        {
        }
        
        public <#=data["className"]#>(GameObject gameObject) : base(gameObject)
        {
            // Setup the resources.
<# foreach(var resource in view.Resources.Items) { #>
            <#=CodeEntity.GetLocalName(resource)#> = new <#=resource.Type#>();
<# } #>

            // Setup the component bindings.
<# foreach(var binding in view.Bindings) {
    if (binding is Property property) { #>
            <#=CodeEntity.GetLocalName(property)#> = new PropertyBinding<<#=property.Type#>, <#=view.ViewModelType#>>(this, "<#=property.Path#>", component => component.<#=property.Member#>, vm => vm.<#=property.Value.Name#>, BindingMode.<#=property.Value.Mode#>);
<# } else if(binding is Event evt) { #>
            <#=CodeEntity.GetLocalName(evt)#> = new EventBinding<<#=evt.Type#>, <#=view.ViewModelType#>>(this, "<#=evt.Path#>", component => component.<#=evt.Member#>, vm => vm.<#=evt.Handler.Name#>);
<# } } #>

            // Setup the element bindings.
<# 
    foreach(var element in alElements.Reverse()) { if(element.Elements.Any()) { #>
            <# if (CodeEntity.RequiresVariable(element)) {#>var <#} #><#=CodeEntity.GetLocalName(element)#> = ﻿new <#=data["variantNamespace"]#>.ElementBinding<<#=view.ViewModelType#>>(<#= view.Elements.Contains(element) ? "this, " : ""#>"<#=element.Path#>"<#= element.Member != null ? ", element => element."+element.Member : ""#><#= element.Value != null ? ", vm => vm."+element.Value.Name : ""#>, new <#=data["variantNamespace"]#>.ElementBinding<<#=view.ViewModelType#>>[] { <#
    for (var i = 0; i < element.Elements.Count; i++)
    {
        var childElement = element.Elements[i];
#><#=CodeEntity.GetLocalName(childElement)#><# if (i < element.Elements.Count - 1) {#>,<#} #> <# } #>});
<#
   }  else { #>
            <# if (CodeEntity.RequiresVariable(element)) {#>var <#} #><#=CodeEntity.GetLocalName(element)#> = ﻿new <#=data["variantNamespace"]#>.ElementBinding<<#=view.ViewModelType#>>(<#= view.Elements.Contains(element) ? "this, " : ""#>"<#=element.Path#>"<#= element.Member != null ? ", element => element."+element.Member : ""#><#= element.Value != null ? ", vm => vm."+element.Value.Name : ""#>);
<#
   } } #> 
            // And initialize.
            Initialize();   
        }
    }
}
